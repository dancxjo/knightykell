#!/usr/bin/env bash
set -euo pipefail

SOCK=${OLED_SOCK:-/run/oled/statusd.sock}
CLIENT=${CLIENT:-/opt/cerebellum/oled/oled_client.py}

usage() {
  cat <<EOF
Usage: oledctl <cmd> [args]
Commands:
  msg [--ttl SEC] HEADER [LINE ...]  Show a custom message temporarily
  sys                               Flash systemd summary
  net                               Flash network info
  logs                              Flash dmesg tail
  clear                             Clear overlay (no-op if expired)
EOF
}

send() {
  if [ -S "$SOCK" ] && [ -x "$CLIENT" ]; then
    "$CLIENT" "$@"
  else
    echo "oledctl: OLED statusd or client not available" >&2
    exit 1
  fi
}

cmd=${1:-}
shift || true
case "$cmd" in
  msg)
    send "$@"
    ;;
  sys)
    # force an overlay with current systemd state
    state=$(systemctl is-system-running 2>/dev/null || true)
    failed=$(systemctl --failed --no-legend 2>/dev/null | awk '{print $1}' | wc -l | tr -d ' ')
    send --ttl 8 "SYSTEM" "state: $state" "failed: $failed"
    ;;
  net)
    ip=$(hostname -I 2>/dev/null | awk '{print $1}')
    ssid=$(iwgetid -r 2>/dev/null || true)
    rssi=$(iw dev wlan0 link 2>/dev/null | awk -F' signal ' 'NF>1{print $2}' | awk '{print $1}')
    send --ttl 8 "NETWORK" "IP: ${ip:-n/a}" "WiFi: ${ssid:-n/a}" "RSSI: ${rssi:-n/a}"
    ;;
  logs)
    lines=$(dmesg -T 2>/dev/null | tail -n 2 | sed 's/^[^]]*] //')
    # shellcheck disable=SC2086
    send --ttl 8 "DMESG" $lines
    ;;
  clear)
    # Clear achieved by sending empty header with ttl=1 so overlay expires fast
    send --ttl 1 "" ""
    ;;
  -h|--help|*)
    usage
    ;;
esac

